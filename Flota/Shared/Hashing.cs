using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Threading.Tasks;

namespace Flota.Shared
{
    public static class Hashing
    {
        private static readonly RSAParameters PublicKeyParameters = new RSAParameters()
        {
            Modulus = new byte[]
            { 222, 181, 2, 57, 168, 21, 40, 254, 214, 112, 163, 43, 215, 240, 195, 88, 155, 49, 38, 137, 150, 28, 225, 104, 105, 189, 28, 197, 163, 31, 208, 249, 141, 232, 41, 62, 219, 241, 101, 131, 145, 103, 127, 190, 217, 103, 35, 54, 234, 218, 81, 248, 147, 44, 154, 0, 229, 115, 221, 72, 223, 28, 151, 121, 109, 96, 195, 1, 159, 132, 164, 249, 42, 171, 197, 35, 193, 221, 157, 113, 88, 114, 151, 19, 63, 31, 226, 157, 221, 6, 191, 175, 122, 38, 109, 130, 74, 11, 27, 30, 60, 66, 171, 129, 247, 104, 127, 86, 242, 174, 92, 115, 184, 78, 184, 113, 179, 153, 201, 176, 8, 166, 135, 219, 200, 211, 214, 197 },
            Exponent = new byte[]
            { 1, 0, 1 },
        };
        private static readonly RSAParameters PrivateKeyParameters = new RSAParameters()
        {
            Modulus = new byte[]
            { 222, 181, 2, 57, 168, 21, 40, 254, 214, 112, 163, 43, 215, 240, 195, 88, 155, 49, 38, 137, 150, 28, 225, 104, 105, 189, 28, 197, 163, 31, 208, 249, 141, 232, 41, 62, 219, 241, 101, 131, 145, 103, 127, 190, 217, 103, 35, 54, 234, 218, 81, 248, 147, 44, 154, 0, 229, 115, 221, 72, 223, 28, 151, 121, 109, 96, 195, 1, 159, 132, 164, 249, 42, 171, 197, 35, 193, 221, 157, 113, 88, 114, 151, 19, 63, 31, 226, 157, 221, 6, 191, 175, 122, 38, 109, 130, 74, 11, 27, 30, 60, 66, 171, 129, 247, 104, 127, 86, 242, 174, 92, 115, 184, 78, 184, 113, 179, 153, 201, 176, 8, 166, 135, 219, 200, 211, 214, 197 },
            Exponent = new byte[]
            { 1, 0, 1 },
            P = new byte[]
            { 245, 141, 69, 107, 246, 52, 142, 84, 246, 242, 250, 155, 82, 246, 115, 38, 95, 52, 91, 201, 87, 197, 222, 194, 11, 228, 18, 94, 29, 126, 15, 94, 222, 77, 77, 194, 55, 42, 29, 71, 14, 45, 243, 127, 114, 174, 249, 208, 46, 189, 146, 182, 182, 61, 148, 135, 199, 120, 153, 244, 45, 118, 159, 105 },
            Q = new byte[]
            { 232, 46, 229, 72, 242, 161, 57, 217, 183, 239, 104, 104, 234, 101, 6, 121, 13, 77, 157, 250, 233, 166, 129, 92, 241, 115, 145, 127, 253, 255, 4, 88, 21, 31, 131, 144, 48, 60, 69, 59, 134, 88, 76, 132, 201, 20, 128, 184, 251, 221, 223, 163, 128, 149, 206, 211, 119, 173, 235, 192, 193, 152, 108, 253 },
            DP = new byte[]
            { 80, 41, 125, 119, 96, 90, 9, 249, 60, 225, 87, 228, 235, 49, 159, 167, 240, 62, 180, 148, 71, 126, 70, 89, 140, 238, 56, 252, 214, 157, 247, 192, 157, 204, 24, 205, 133, 154, 207, 18, 10, 84, 0, 1, 36, 92, 113, 27, 128, 150, 204, 213, 175, 42, 237, 89, 98, 74, 65, 224, 80, 19, 64, 185 },
            DQ = new byte[]
            { 115, 221, 219, 60, 49, 32, 182, 30, 233, 68, 135, 5, 60, 91, 152, 4, 86, 216, 50, 11, 98, 8, 94, 172, 68, 46, 25, 33, 23, 94, 233, 11, 15, 215, 127, 47, 56, 115, 11, 85, 174, 48, 104, 87, 39, 133, 156, 203, 51, 157, 192, 153, 246, 116, 76, 23, 137, 180, 248, 94, 99, 254, 45, 253 },
            InverseQ = new byte[]
            { 13, 116, 165, 40, 151, 230, 141, 208, 88, 252, 241, 5, 173, 119, 114, 106, 156, 97, 65, 148, 237, 179, 207, 130, 222, 238, 210, 40, 163, 90, 53, 32, 8, 251, 43, 245, 114, 84, 0, 73, 233, 139, 2, 226, 22, 45, 85, 73, 73, 31, 204, 212, 141, 112, 160, 2, 185, 120, 82, 192, 19, 107, 254, 108 },
            D = new byte[]
            { 51, 57, 107, 19, 155, 231, 146, 16, 91, 126, 120, 233, 130, 183, 172, 22, 219, 75, 72, 211, 232, 165, 39, 235, 126, 54, 179, 65, 122, 45, 189, 65, 73, 52, 151, 24, 16, 58, 203, 224, 161, 55, 47, 24, 212, 164, 118, 99, 17, 77, 186, 0, 244, 201, 19, 123, 21, 75, 187, 32, 33, 193, 79, 205, 126, 74, 155, 133, 57, 151, 170, 205, 31, 255, 200, 3, 251, 212, 123, 44, 179, 154, 26, 116, 170, 193, 249, 71, 249, 103, 43, 124, 210, 203, 29, 14, 58, 20, 26, 97, 57, 202, 153, 55, 180, 164, 217, 111, 203, 6, 231, 131, 173, 168, 8, 125, 42, 131, 239, 209, 156, 175, 70, 207, 108, 211, 104, 193 },
        };

        public static string Decrypt(string strToDecrypt)
        {
            return General.Common.Security.RSA.Decrypt(strToDecrypt, PrivateKeyParameters);
        }
        public static string Encrypt(string strToEncrypt)
        {
            return General.Common.Security.RSA.Encrypt(strToEncrypt, PrivateKeyParameters);
        }
    }
}
